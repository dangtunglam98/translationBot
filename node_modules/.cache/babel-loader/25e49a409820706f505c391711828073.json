{"ast":null,"code":"// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n'use strict';\n\nconst gapicConfig = require('./translation_service_client_config.json');\n\nconst gax = require('google-gax');\n\nconst path = require('path');\n\nconst protobuf = require('protobufjs');\n\nconst VERSION = require('../../../package.json').version;\n/**\n * Provides natural language translation operations.\n *\n * @class\n * @memberof v3beta1\n */\n\n\nclass TranslationServiceClient {\n  /**\n   * Construct an instance of TranslationServiceClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {function} [options.promise] - Custom promise module to use instead\n   *     of native Promises.\n   * @param {string} [options.servicePath] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    opts = opts || {};\n    this._descriptors = {};\n    const servicePath = opts.servicePath || opts.apiEndpoint || this.constructor.servicePath; // Ensure that options include the service address and port.\n\n    opts = Object.assign({\n      clientConfig: {},\n      port: this.constructor.port,\n      servicePath\n    }, opts); // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    const gaxGrpc = new gax.GrpcClient(opts); // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [\"gl-node/\".concat(process.version), \"grpc/\".concat(gaxGrpc.grpcVersion), \"gax/\".concat(gax.version), \"gapic/\".concat(VERSION)];\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n\n\n    const protos = gaxGrpc.loadProto(path.join(__dirname, '..', '..', 'protos'), ['google/cloud/translate/v3beta1/translation_service.proto']); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this._pathTemplates = {\n      glossaryPathTemplate: new gax.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n      locationPathTemplate: new gax.PathTemplate('projects/{project}/locations/{location}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listGlossaries: new gax.PageDescriptor('pageToken', 'nextPageToken', 'glossaries')\n    };\n    let protoFilesRoot = new gax.GoogleProtoFilesRoot();\n    protoFilesRoot = protobuf.loadSync(path.join(__dirname, '..', '..', 'protos', 'google/cloud/translate/v3beta1/translation_service.proto'), protoFilesRoot); // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    this.operationsClient = new gax.lro({\n      auth: gaxGrpc.auth,\n      grpc: gaxGrpc.grpc\n    }).operationsClient(opts);\n    const batchTranslateTextResponse = protoFilesRoot.lookup('google.cloud.translation.v3beta1.BatchTranslateResponse');\n    const batchTranslateTextMetadata = protoFilesRoot.lookup('google.cloud.translation.v3beta1.BatchTranslateMetadata');\n    const createGlossaryResponse = protoFilesRoot.lookup('google.cloud.translation.v3beta1.Glossary');\n    const createGlossaryMetadata = protoFilesRoot.lookup('google.cloud.translation.v3beta1.CreateGlossaryMetadata');\n    const deleteGlossaryResponse = protoFilesRoot.lookup('google.cloud.translation.v3beta1.DeleteGlossaryResponse');\n    const deleteGlossaryMetadata = protoFilesRoot.lookup('google.cloud.translation.v3beta1.DeleteGlossaryMetadata');\n    this._descriptors.longrunning = {\n      batchTranslateText: new gax.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n      createGlossary: new gax.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n      deleteGlossary: new gax.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))\n    }; // Put together the default options sent with requests.\n\n    const defaults = gaxGrpc.constructSettings('google.cloud.translation.v3beta1.TranslationService', gapicConfig, opts.clientConfig, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {}; // Put together the \"service stub\" for\n    // google.cloud.translation.v3beta1.TranslationService.\n\n    const translationServiceStub = gaxGrpc.createStub(protos.google.cloud.translation.v3beta1.TranslationService, opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const translationServiceStubMethods = ['translateText', 'detectLanguage', 'getSupportedLanguages', 'batchTranslateText', 'createGlossary', 'listGlossaries', 'getGlossary', 'deleteGlossary'];\n\n    for (const methodName of translationServiceStubMethods) {\n      this._innerApiCalls[methodName] = gax.createApiCall(translationServiceStub.then(stub => function () {\n        const args = Array.prototype.slice.call(arguments, 0);\n        return stub[methodName].apply(stub, args);\n      }, err => function () {\n        throw err;\n      }), defaults[methodName], this._descriptors.page[methodName] || this._descriptors.longrunning[methodName]);\n    }\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-translation'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    return this.auth.getProjectId(callback);\n  } // -------------------\n  // -- Service calls --\n  // -------------------\n\n  /**\n   * Translates input text and returns translated text.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string[]} request.contents\n   *   Required. The content of the input in string format.\n   *   We recommend the total content be less than 30k codepoints.\n   *   Use BatchTranslateText for larger text.\n   * @param {string} request.targetLanguageCode\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   text, set to one of the language codes listed in Language Support.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {string} [request.sourceLanguageCode]\n   *   Optional. The BCP-47 language code of the input text if\n   *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n   *   listed in Language Support. If the source language isn't specified, the API\n   *   attempts to identify the source language automatically and returns the\n   *   source language within the response.\n   * @param {string} [request.parent]\n   *   Required. Location to make a regional or global call.\n   *\n   *   Format: `projects/{project-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-id}/locations/global`.\n   *\n   *   Models and glossaries must be within the same region (have same\n   *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The `model` type requested for this translation.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   For global (non-regionalized) requests, use `location-id` `global`.\n   *   For example,\n   *   `projects/{project-id}/locations/global/models/general/nmt`.\n   *\n   *   If missing, the system decides which google base model to use.\n   * @param {Object} [request.glossaryConfig]\n   *   Optional. Glossary to be applied. The glossary must be\n   *   within the same region (have the same location-id) as the model, otherwise\n   *   an INVALID_ARGUMENT (400) error is returned.\n   *\n   *   This object should have the same structure as [TranslateTextGlossaryConfig]{@link google.cloud.translation.v3beta1.TranslateTextGlossaryConfig}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3beta1.TranslateTextResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3beta1.TranslateTextResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const contents = [];\n   * const targetLanguageCode = '';\n   * const request = {\n   *   contents: contents,\n   *   targetLanguageCode: targetLanguageCode,\n   * };\n   * client.translateText(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  translateText(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.translateText(request, options, callback);\n  }\n  /**\n   * Detects the language of text within a request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} [request.parent]\n   *   Required. Location to make a regional or global call.\n   *\n   *   Format: `projects/{project-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-id}/locations/global`.\n   *\n   *   Only models within the same region (has same location-id) can be used.\n   *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The language detection model to be used.\n   *\n   *   Format:\n   *   `projects/{project-id}/locations/{location-id}/models/language-detection/{model-id}`\n   *\n   *   Only one language detection model is currently supported:\n   *   `projects/{project-id}/locations/{location-id}/models/language-detection/default`.\n   *\n   *   If not specified, the default model is used.\n   * @param {string} [request.content]\n   *   The content of the input stored as a string.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3beta1.DetectLanguageResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3beta1.DetectLanguageResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   *\n   * client.detectLanguage({})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  detectLanguage(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.detectLanguage(request, options, callback);\n  }\n  /**\n   * Returns a list of supported languages for translation.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} [request.parent]\n   *   Required. Location to make a regional or global call.\n   *\n   *   Format: `projects/{project-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-id}/locations/global`.\n   *\n   *   Only models within the same region (have same location-id) can be used,\n   *   otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.displayLanguageCode]\n   *   Optional. The language to use to return localized, human readable names\n   *   of supported languages. If missing, then display names are not returned\n   *   in a response.\n   * @param {string} [request.model]\n   *   Optional. Get supported languages of this model.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   Returns languages supported by the specified model.\n   *   If missing, we get supported languages of Google general base (PBMT) model.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [SupportedLanguages]{@link google.cloud.translation.v3beta1.SupportedLanguages}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3beta1.SupportedLanguages}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   *\n   * client.getSupportedLanguages({})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getSupportedLanguages(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.getSupportedLanguages(request, options, callback);\n  }\n  /**\n   * Translates a large volume of text in asynchronous batch mode.\n   * This function provides real-time output as the inputs are being processed.\n   * If caller cancels a request, the partial results (for an input file, it's\n   * all or nothing) may still be available on the specified output location.\n   *\n   * This call returns immediately and you can\n   * use google.longrunning.Operation.name to poll the status of the call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.sourceLanguageCode\n   *   Required. Source language code.\n   * @param {string[]} request.targetLanguageCodes\n   *   Required. Specify up to 10 language codes here.\n   * @param {Object[]} request.inputConfigs\n   *   Required. Input configurations.\n   *   The total number of files matched should be <= 1000.\n   *   The total content size should be <= 100M Unicode codepoints.\n   *   The files must use UTF-8 encoding.\n   *\n   *   This object should have the same structure as [InputConfig]{@link google.cloud.translation.v3beta1.InputConfig}\n   * @param {Object} request.outputConfig\n   *   Required. Output configuration.\n   *   If 2 input configs match to the same file (that is, same input path),\n   *   we don't generate output for duplicate inputs.\n   *\n   *   This object should have the same structure as [OutputConfig]{@link google.cloud.translation.v3beta1.OutputConfig}\n   * @param {string} [request.parent]\n   *   Required. Location to make a regional call.\n   *\n   *   Format: `projects/{project-id}/locations/{location-id}`.\n   *\n   *   The `global` location is not supported for batch translation.\n   *\n   *   Only AutoML Translation models or glossaries within the same region (have\n   *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n   *   error is returned.\n   * @param {Object.<string, string>} [request.models]\n   *   Optional. The models to use for translation. Map's key is target language\n   *   code. Map's value is model name. Value can be a built-in general model,\n   *   or an AutoML Translation model.\n   *\n   *   The value format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   If the map is empty or a specific model is\n   *   not requested for a language pair, then default google model (nmt) is used.\n   * @param {Object.<string, Object>} [request.glossaries]\n   *   Optional. Glossaries to be applied for translation.\n   *   It's keyed by target language code.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/classes/Operation.html} object.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/classes/Operation.html} object.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const sourceLanguageCode = '';\n   * const targetLanguageCodes = [];\n   * const inputConfigs = [];\n   * const outputConfig = {};\n   * const request = {\n   *   sourceLanguageCode: sourceLanguageCode,\n   *   targetLanguageCodes: targetLanguageCodes,\n   *   inputConfigs: inputConfigs,\n   *   outputConfig: outputConfig,\n   * };\n   *\n   * // Handle the operation using the promise pattern.\n   * client.batchTranslateText(request)\n   *   .then(responses => {\n   *     const [operation, initialApiResponse] = responses;\n   *\n   *     // Operation#promise starts polling for the completion of the LRO.\n   *     return operation.promise();\n   *   })\n   *   .then(responses => {\n   *     const result = responses[0];\n   *     const metadata = responses[1];\n   *     const finalApiResponse = responses[2];\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * const sourceLanguageCode = '';\n   * const targetLanguageCodes = [];\n   * const inputConfigs = [];\n   * const outputConfig = {};\n   * const request = {\n   *   sourceLanguageCode: sourceLanguageCode,\n   *   targetLanguageCodes: targetLanguageCodes,\n   *   inputConfigs: inputConfigs,\n   *   outputConfig: outputConfig,\n   * };\n   *\n   * // Handle the operation using the event emitter pattern.\n   * client.batchTranslateText(request)\n   *   .then(responses => {\n   *     const [operation, initialApiResponse] = responses;\n   *\n   *     // Adding a listener for the \"complete\" event starts polling for the\n   *     // completion of the operation.\n   *     operation.on('complete', (result, metadata, finalApiResponse) => {\n   *       // doSomethingWith(result);\n   *     });\n   *\n   *     // Adding a listener for the \"progress\" event causes the callback to be\n   *     // called on any change in metadata when the operation is polled.\n   *     operation.on('progress', (metadata, apiResponse) => {\n   *       // doSomethingWith(metadata)\n   *     });\n   *\n   *     // Adding a listener for the \"error\" event handles any errors found during polling.\n   *     operation.on('error', err => {\n   *       // throw(err);\n   *     });\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * const sourceLanguageCode = '';\n   * const targetLanguageCodes = [];\n   * const inputConfigs = [];\n   * const outputConfig = {};\n   * const request = {\n   *   sourceLanguageCode: sourceLanguageCode,\n   *   targetLanguageCodes: targetLanguageCodes,\n   *   inputConfigs: inputConfigs,\n   *   outputConfig: outputConfig,\n   * };\n   *\n   * // Handle the operation using the await pattern.\n   * const [operation] = await client.batchTranslateText(request);\n   *\n   * const [response] = await operation.promise();\n   */\n\n\n  batchTranslateText(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.batchTranslateText(request, options, callback);\n  }\n  /**\n   * Creates a glossary and returns the long-running operation. Returns\n   * NOT_FOUND, if the project doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project name.\n   * @param {Object} request.glossary\n   *   Required. The glossary to create.\n   *\n   *   This object should have the same structure as [Glossary]{@link google.cloud.translation.v3beta1.Glossary}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/classes/Operation.html} object.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/classes/Operation.html} object.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedParent = client.locationPath('[PROJECT]', '[LOCATION]');\n   * const glossary = {};\n   * const request = {\n   *   parent: formattedParent,\n   *   glossary: glossary,\n   * };\n   *\n   * // Handle the operation using the promise pattern.\n   * client.createGlossary(request)\n   *   .then(responses => {\n   *     const [operation, initialApiResponse] = responses;\n   *\n   *     // Operation#promise starts polling for the completion of the LRO.\n   *     return operation.promise();\n   *   })\n   *   .then(responses => {\n   *     const result = responses[0];\n   *     const metadata = responses[1];\n   *     const finalApiResponse = responses[2];\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * const formattedParent = client.locationPath('[PROJECT]', '[LOCATION]');\n   * const glossary = {};\n   * const request = {\n   *   parent: formattedParent,\n   *   glossary: glossary,\n   * };\n   *\n   * // Handle the operation using the event emitter pattern.\n   * client.createGlossary(request)\n   *   .then(responses => {\n   *     const [operation, initialApiResponse] = responses;\n   *\n   *     // Adding a listener for the \"complete\" event starts polling for the\n   *     // completion of the operation.\n   *     operation.on('complete', (result, metadata, finalApiResponse) => {\n   *       // doSomethingWith(result);\n   *     });\n   *\n   *     // Adding a listener for the \"progress\" event causes the callback to be\n   *     // called on any change in metadata when the operation is polled.\n   *     operation.on('progress', (metadata, apiResponse) => {\n   *       // doSomethingWith(metadata)\n   *     });\n   *\n   *     // Adding a listener for the \"error\" event handles any errors found during polling.\n   *     operation.on('error', err => {\n   *       // throw(err);\n   *     });\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * const formattedParent = client.locationPath('[PROJECT]', '[LOCATION]');\n   * const glossary = {};\n   * const request = {\n   *   parent: formattedParent,\n   *   glossary: glossary,\n   * };\n   *\n   * // Handle the operation using the await pattern.\n   * const [operation] = await client.createGlossary(request);\n   *\n   * const [response] = await operation.promise();\n   */\n\n\n  createGlossary(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.createGlossary(request, options, callback);\n  }\n  /**\n   * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} [request.parent]\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Filtering is not supported yet, and the parameter currently has no effect.\n   *   If missing, no filtering is performed.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListGlossariesResponse]{@link google.cloud.translation.v3beta1.ListGlossariesResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Glossary]{@link google.cloud.translation.v3beta1.Glossary} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListGlossariesResponse]{@link google.cloud.translation.v3beta1.ListGlossariesResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * client.listGlossaries({})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listGlossaries(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listGlossaries({}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listGlossaries(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent\n    });\n    return this._innerApiCalls.listGlossaries(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listGlossaries}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listGlossaries} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} [request.parent]\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Filtering is not supported yet, and the parameter currently has no effect.\n   *   If missing, no filtering is performed.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary} on 'data' event.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   *\n   * client.listGlossariesStream({})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n\n\n  listGlossariesStream(request, options) {\n    options = options || {};\n    return this._descriptors.page.listGlossaries.createStream(this._innerApiCalls.listGlossaries, request, options);\n  }\n  /**\n   * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to retrieve.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.glossaryPath('[PROJECT]', '[LOCATION]', '[GLOSSARY]');\n   * client.getGlossary({name: formattedName})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getGlossary(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.getGlossary(request, options, callback);\n  }\n  /**\n   * Deletes a glossary, or cancels glossary construction\n   * if the glossary isn't created yet.\n   * Returns NOT_FOUND, if the glossary doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to delete.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/classes/Operation.html} object.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/classes/Operation.html} object.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const translate = require('@google-cloud/translate');\n   *\n   * const client = new translate.v3beta1.TranslationServiceClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.glossaryPath('[PROJECT]', '[LOCATION]', '[GLOSSARY]');\n   *\n   * // Handle the operation using the promise pattern.\n   * client.deleteGlossary({name: formattedName})\n   *   .then(responses => {\n   *     const [operation, initialApiResponse] = responses;\n   *\n   *     // Operation#promise starts polling for the completion of the LRO.\n   *     return operation.promise();\n   *   })\n   *   .then(responses => {\n   *     const result = responses[0];\n   *     const metadata = responses[1];\n   *     const finalApiResponse = responses[2];\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * const formattedName = client.glossaryPath('[PROJECT]', '[LOCATION]', '[GLOSSARY]');\n   *\n   * // Handle the operation using the event emitter pattern.\n   * client.deleteGlossary({name: formattedName})\n   *   .then(responses => {\n   *     const [operation, initialApiResponse] = responses;\n   *\n   *     // Adding a listener for the \"complete\" event starts polling for the\n   *     // completion of the operation.\n   *     operation.on('complete', (result, metadata, finalApiResponse) => {\n   *       // doSomethingWith(result);\n   *     });\n   *\n   *     // Adding a listener for the \"progress\" event causes the callback to be\n   *     // called on any change in metadata when the operation is polled.\n   *     operation.on('progress', (metadata, apiResponse) => {\n   *       // doSomethingWith(metadata)\n   *     });\n   *\n   *     // Adding a listener for the \"error\" event handles any errors found during polling.\n   *     operation.on('error', err => {\n   *       // throw(err);\n   *     });\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * const formattedName = client.glossaryPath('[PROJECT]', '[LOCATION]', '[GLOSSARY]');\n   *\n   * // Handle the operation using the await pattern.\n   * const [operation] = await client.deleteGlossary({name: formattedName});\n   *\n   * const [response] = await operation.promise();\n   */\n\n\n  deleteGlossary(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.deleteGlossary(request, options, callback);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified glossary resource name string.\n   *\n   * @param {String} project\n   * @param {String} location\n   * @param {String} glossary\n   * @returns {String}\n   */\n\n\n  glossaryPath(project, location, glossary) {\n    return this._pathTemplates.glossaryPathTemplate.render({\n      project: project,\n      location: location,\n      glossary: glossary\n    });\n  }\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {String} project\n   * @param {String} location\n   * @returns {String}\n   */\n\n\n  locationPath(project, location) {\n    return this._pathTemplates.locationPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the glossaryName from a glossary resource.\n   *\n   * @param {String} glossaryName\n   *   A fully-qualified path representing a glossary resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromGlossaryName(glossaryName) {\n    return this._pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n  }\n  /**\n   * Parse the glossaryName from a glossary resource.\n   *\n   * @param {String} glossaryName\n   *   A fully-qualified path representing a glossary resources.\n   * @returns {String} - A string representing the location.\n   */\n\n\n  matchLocationFromGlossaryName(glossaryName) {\n    return this._pathTemplates.glossaryPathTemplate.match(glossaryName).location;\n  }\n  /**\n   * Parse the glossaryName from a glossary resource.\n   *\n   * @param {String} glossaryName\n   *   A fully-qualified path representing a glossary resources.\n   * @returns {String} - A string representing the glossary.\n   */\n\n\n  matchGlossaryFromGlossaryName(glossaryName) {\n    return this._pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;\n  }\n  /**\n   * Parse the locationName from a location resource.\n   *\n   * @param {String} locationName\n   *   A fully-qualified path representing a location resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromLocationName(locationName) {\n    return this._pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the locationName from a location resource.\n   *\n   * @param {String} locationName\n   *   A fully-qualified path representing a location resources.\n   * @returns {String} - A string representing the location.\n   */\n\n\n  matchLocationFromLocationName(locationName) {\n    return this._pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n\n}\n\nmodule.exports = TranslationServiceClient;","map":null,"metadata":{},"sourceType":"script"}