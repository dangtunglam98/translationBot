{"ast":null,"code":"'use strict';\n\nvar isObj = require('is-obj');\n\nmodule.exports.get = function (obj, path) {\n  if (!isObj(obj) || typeof path !== 'string') {\n    return obj;\n  }\n\n  var pathArr = getPathSegments(path);\n\n  for (var i = 0; i < pathArr.length; i++) {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, pathArr[i]) || Object.getOwnPropertyDescriptor(Object.prototype, pathArr[i]);\n\n    if (descriptor && !descriptor.enumerable) {\n      return;\n    }\n\n    obj = obj[pathArr[i]];\n\n    if (obj === undefined || obj === null) {\n      // `obj` is either `undefined` or `null` so we want to stop the loop, and\n      // if this is not the last bit of the path, and\n      // if it did't return `undefined`\n      // it would return `null` if `obj` is `null`\n      // but we want `get({foo: null}, 'foo.bar')` to equal `undefined` not `null`\n      if (i !== pathArr.length - 1) {\n        return undefined;\n      }\n\n      break;\n    }\n  }\n\n  return obj;\n};\n\nmodule.exports.set = function (obj, path, value) {\n  if (!isObj(obj) || typeof path !== 'string') {\n    return;\n  }\n\n  var pathArr = getPathSegments(path);\n\n  for (var i = 0; i < pathArr.length; i++) {\n    var p = pathArr[i];\n\n    if (!isObj(obj[p])) {\n      obj[p] = {};\n    }\n\n    if (i === pathArr.length - 1) {\n      obj[p] = value;\n    }\n\n    obj = obj[p];\n  }\n};\n\nmodule.exports.delete = function (obj, path) {\n  if (!isObj(obj) || typeof path !== 'string') {\n    return;\n  }\n\n  var pathArr = getPathSegments(path);\n\n  for (var i = 0; i < pathArr.length; i++) {\n    var p = pathArr[i];\n\n    if (i === pathArr.length - 1) {\n      delete obj[p];\n      return;\n    }\n\n    obj = obj[p];\n  }\n};\n\nmodule.exports.has = function (obj, path) {\n  if (!isObj(obj) || typeof path !== 'string') {\n    return false;\n  }\n\n  var pathArr = getPathSegments(path);\n\n  for (var i = 0; i < pathArr.length; i++) {\n    obj = obj[pathArr[i]];\n\n    if (obj === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction getPathSegments(path) {\n  var pathArr = path.split('.');\n  var parts = [];\n\n  for (var i = 0; i < pathArr.length; i++) {\n    var p = pathArr[i];\n\n    while (p[p.length - 1] === '\\\\' && pathArr[i + 1] !== undefined) {\n      p = p.slice(0, -1) + '.';\n      p += pathArr[++i];\n    }\n\n    parts.push(p);\n  }\n\n  return parts;\n}","map":null,"metadata":{},"sourceType":"script"}