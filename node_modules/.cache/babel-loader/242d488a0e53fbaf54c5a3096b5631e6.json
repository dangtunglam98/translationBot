{"ast":null,"code":"\"use strict\"; // Copyright 2017, Google LLC All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst extend = require(\"extend\");\n\nconst is = require(\"is\");\n\nconst isHtml = require('is-html');\n\nconst PKG = require('../../../package.json');\n/**\n * @typedef {object} ClientConfig\n * @memberof v2\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [key] An API key. You should prefer using a Service\n *     Account key file instead of an API key.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {number} [maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n\n/**\n * With [Google Translate](https://cloud.google.com/translate), you can\n * dynamically translate text between thousands of language pairs.\n *\n * The Google Cloud Translation API lets websites and programs integrate with\n * Google Translate programmatically.\n *\n * @class\n * @memberof v2\n *\n * @see [Getting Started]{@link https://cloud.google.com/translate/v2/getting_started}\n * @see [Identifying your application to Google]{@link https://cloud.google.com/translate/v2/using_rest#auth}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example\n * //-\n * // <h3>Custom Translation API</h3>\n * //\n * // The environment variable, `GOOGLE_CLOUD_TRANSLATE_ENDPOINT`, is honored as\n * // a custom backend which our library will send requests to.\n * //-\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:translate_quickstart\n * Full quickstart example:\n */\n\n\nclass Translate extends common_1.Service {\n  constructor(options = {}) {\n    options.apiEndpoint = options.apiEndpoint || 'translation.googleapis.com';\n    let baseUrl = \"https://\".concat(options.apiEndpoint, \"/language/translate/v2\");\n\n    if (process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT) {\n      baseUrl = process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT.replace(/\\/+$/, '');\n    }\n\n    const config = {\n      apiEndpoint: options.apiEndpoint,\n      baseUrl,\n      scopes: ['https://www.googleapis.com/auth/cloud-platform'],\n      packageJson: require('../../../package.json'),\n      projectIdRequired: false\n    };\n    super(config, options);\n    this.options = options || {};\n\n    if (this.options.key) {\n      this.key = this.options.key;\n    }\n  }\n  /**\n   * @typedef {object} DetectResult\n   * @memberof v2\n   * @property {string} 0.language The language code matched from the input.\n   * @property {number} [0.confidence] A float 0 - 1. The higher the number, the\n   *     higher the confidence in language detection. Note, this is not always\n   *     returned from the API.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback DetectCallback\n   * @memberof v2\n   * @param {?Error} err Request error, if any.\n   * @param {object|object[]} results The detection results.\n   * @param {string} results.language The language code matched from the input.\n   * @param {number} [results.confidence] A float 0 - 1. The higher the number, the\n   *     higher the confidence in language detection. Note, this is not always\n   *     returned from the API.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Detect the language used in a string or multiple strings.\n   *\n   * @see [Detect Language]{@link https://cloud.google.com/translate/v2/using_rest#detect-language}\n   *\n   * @param {string|string[]} input - The source string input.\n   * @param {DetectCallback} [callback] Callback function.\n   * @returns {Promise<DetectResponse>}\n   *\n   * @example\n   * const {Translate} = require('@google-cloud/translate');\n   *\n   * const translate = new Translate();\n   *\n   * //-\n   * // Detect the language from a single string input.\n   * //-\n   * translate.detect('Hello', (err, results) => {\n   *   if (!err) {\n   *     // results = {\n   *     //   language: 'en',\n   *     //   confidence: 1,\n   *     //   input: 'Hello'\n   *     // }\n   *   }\n   * });\n   *\n   * //-\n   * // Detect the languages used in multiple strings. Note that the results are\n   * // now provided as an array.\n   * //-\n   * translate.detect([\n   *   'Hello',\n   *   'Hola'\n   * ], (err, results) => {\n   *   if (!err) {\n   *     // results = [\n   *     //   {\n   *     //     language: 'en',\n   *     //     confidence: 1,\n   *     //     input: 'Hello'\n   *     //   },\n   *     //   {\n   *     //     language: 'es',\n   *     //     confidence: 1,\n   *     //     input: 'Hola'\n   *     //   }\n   *     // ]\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * translate.detect('Hello').then((data) => {\n   *   const results = data[0];\n   *   const apiResponse = data[2];\n   * });\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_detect_language\n   * Here's a full example:\n   */\n\n\n  detect(input, callback) {\n    const inputIsArray = Array.isArray(input);\n    input = arrify(input);\n    this.request({\n      method: 'POST',\n      uri: '/detect',\n      json: {\n        q: input\n      }\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      let results = resp.data.detections.map((detection, index) => {\n        const result = extend({}, detection[0], {\n          input: input[index]\n        }); // Deprecated.\n        // tslint:disable-next-line no-any\n\n        delete result.isReliable;\n        return result;\n      });\n\n      if (input.length === 1 && !inputIsArray) {\n        results = results[0];\n      }\n\n      callback(null, results, resp);\n    });\n  }\n  /**\n   * @typedef {object} LanguageResult\n   * @memberof v2\n   * @property {string} code The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n   *     language code.\n   * @property {string} name The language name. This can be translated into your\n   *     preferred language with the `target` option.\n   */\n\n  /**\n   * @callback GetLanguagesCallback\n   * @memberof v2\n   * @param {?Error} err Request error, if any.\n   * @param {object[]} results The languages supported by the API.\n   * @param {string} results.code The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n   *     language code.\n   * @param {string} results.name The language name. This can be translated into your\n   *     preferred language with the `target` option.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get an array of all supported languages.\n   *\n   * @see [Discovering Supported Languages]{@link https://cloud.google.com/translate/v2/discovering-supported-languages-with-rest}\n   *\n   * @param {string} [target] Get the language names in a language other than\n   *     English.\n   * @param {GetLanguagesCallback} [callback] Callback function.\n   * @returns {Promise<GetLanguagesResponse>}\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_list_codes\n   * Gets the language names in English:\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_list_language_names\n   * Gets the language names in a language other than English:\n   */\n\n\n  getLanguages(targetOrCallback, callback) {\n    let target;\n\n    if (is.fn(targetOrCallback)) {\n      callback = targetOrCallback;\n      target = 'en';\n    } else {\n      target = targetOrCallback;\n    }\n\n    const reqOpts = {\n      uri: '/languages',\n      useQuerystring: true,\n      qs: {}\n    };\n\n    if (target && is.string(target)) {\n      reqOpts.qs.target = target;\n    }\n\n    this.request(reqOpts, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const languages = resp.data.languages.map(language => {\n        return {\n          code: language.language,\n          name: language.name\n        };\n      });\n      callback(null, languages, resp);\n    });\n  }\n  /**\n   * Translate request options.\n   *\n   * @typedef {object} TranslateRequest\n   * @memberof v2\n   * @property {string} [format] Set the text's format as `html` or `text`.\n   *     If not provided, we will try to auto-detect if the text given is HTML.\n   * If not, we set the format as `text`.\n   * @property {string} [from] The ISO 639-1 language code the source input\n   *     is written in.\n   * @property {string} [model] Set the model type requested for this\n   *     translation. Please refer to the upstream documentation for possible\n   *     values.\n   * @property {string} to The ISO 639-1 language code to translate the\n   *     input to.\n   */\n\n  /**\n   * @callback TranslateCallback\n   * @memberof v2\n   * @param {?Error} err Request error, if any.\n   * @param {object|object[]} translations If a single string input was given, a\n   *     single translation is given. Otherwise, it is an array of translations.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Translate a string or multiple strings into another language.\n   *\n   * @see [Translate Text](https://cloud.google.com/translate/v2/using_rest#Translate)\n   *\n   * @throws {Error} If `options` is provided as an object without a `to`\n   *     property.\n   *\n   * @param {string|string[]} input The source string input.\n   * @param {string|TranslateRequest} [options] If a string, it is interpreted as the\n   *     target ISO 639-1 language code to translate the source input to. (e.g.\n   *     `en` for English). If an object, you may also specify the source\n   *     language.\n   * @param {TranslateCallback} [callback] Callback function.\n   * @returns {Promise<TranslateResponse>}\n   *\n   * @example\n   * //-\n   * // Pass a string and a language code to get the translation.\n   * //-\n   * translate.translate('Hello', 'es', (err, translation) => {\n   *   if (!err) {\n   *     // translation = 'Hola'\n   *   }\n   * });\n   *\n   * //-\n   * // The source language is auto-detected by default. To manually set it,\n   * // provide an object.\n   * //-\n   * const options = {\n   *   from: 'en',\n   *   to: 'es'\n   * };\n   *\n   * translate.translate('Hello', options, (err, translation) => {\n   *   if (!err) {\n   *     // translation = 'Hola'\n   *   }\n   * });\n   *\n   * //-\n   * // Translate multiple strings of input. Note that the results are\n   * // now provided as an array.\n   * //-\n   * const input = [\n   *   'Hello',\n   *   'How are you today?'\n   * ];\n   *\n   * translate.translate(input, 'es', (err, translations) => {\n   *   if (!err) {\n   *     // translations = [\n   *     //   'Hola',\n   *     //   'Como estas hoy?'\n   *     // ]\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * translate.translate('Hello', 'es').then((data) => {\n   *   const translation = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_translate_text\n   * Full translation example:\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_text_with_model\n   * Translation using the premium model:\n   */\n\n\n  translate(inputs, optionsOrTo, callback) {\n    const inputIsArray = Array.isArray(inputs);\n    const input = arrify(inputs);\n    let options = {};\n\n    if (typeof optionsOrTo === 'object') {\n      options = optionsOrTo;\n    } else if (typeof optionsOrTo === 'string') {\n      options = {\n        to: optionsOrTo\n      };\n    } // tslint:disable-next-line no-any\n\n\n    const body = {\n      q: input,\n      format: options.format || (isHtml(input[0]) ? 'html' : 'text')\n    };\n\n    if (is.string(options)) {\n      body.target = options;\n    } else {\n      if (options.from) {\n        body.source = options.from;\n      }\n\n      if (options.to) {\n        body.target = options.to;\n      }\n\n      if (options.model) {\n        body.model = options.model;\n      }\n    }\n\n    if (!body.target) {\n      throw new Error('A target language is required to perform a translation.');\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '',\n      json: body\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      let translations = resp.data.translations.map(x => x.translatedText);\n\n      if (body.q.length === 1 && !inputIsArray) {\n        translations = translations[0];\n      }\n\n      callback(err, translations, resp);\n    });\n  }\n  /**\n   * A custom request implementation. Requests to this API may optionally use an\n   * API key for an application, not a bearer token from a service account. This\n   * means it is possible to skip the `makeAuthenticatedRequest` portion of the\n   * typical request lifecycle, and manually authenticate the request here.\n   *\n   * @private\n   *\n   * @param {object} reqOpts - Request options that are passed to `request`.\n   * @param {function} callback - The callback function passed to `request`.\n   */\n\n\n  request(reqOpts, callback) {\n    if (!this.key) {\n      super.request(reqOpts, callback);\n      return;\n    }\n\n    reqOpts.uri = this.baseUrl + reqOpts.uri;\n    reqOpts = extend(true, {}, reqOpts, {\n      qs: {\n        key: this.key\n      },\n      headers: {\n        'User-Agent': common_1.util.getUserAgentFromPackageJson(PKG)\n      }\n    });\n    common_1.util.makeRequest(reqOpts, this.options, callback);\n  }\n\n}\n\nexports.Translate = Translate;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Translate, {\n  exclude: ['request']\n});","map":null,"metadata":{},"sourceType":"script"}