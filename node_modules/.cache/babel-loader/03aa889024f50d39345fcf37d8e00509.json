{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar osenv = require('osenv');\n\nvar assign = require('object-assign');\n\nvar mkdirp = require('mkdirp');\n\nvar uuid = require('uuid');\n\nvar xdgBasedir = require('xdg-basedir');\n\nvar osTmpdir = require('os-tmpdir');\n\nvar writeFileAtomic = require('write-file-atomic');\n\nvar dotProp = require('dot-prop');\n\nvar user = (osenv.user() || uuid.v4()).replace(/\\\\/g, '');\nvar configDir = xdgBasedir.config || path.join(osTmpdir(), user, '.config');\nvar permissionError = 'You don\\'t have access to this file.';\nvar defaultPathMode = parseInt('0700', 8);\nvar writeFileOptions = {\n  mode: parseInt('0600', 8)\n};\n\nfunction Configstore(id, defaults, opts) {\n  opts = opts || {};\n  var pathPrefix = opts.globalConfigPath ? path.join(id, 'config.json') : path.join('configstore', id + '.json');\n  this.path = path.join(configDir, pathPrefix);\n  this.all = assign({}, defaults || {}, this.all || {});\n}\n\nConfigstore.prototype = Object.create(Object.prototype, {\n  all: {\n    get: function () {\n      try {\n        return JSON.parse(fs.readFileSync(this.path, 'utf8'));\n      } catch (err) {\n        // create dir if it doesn't exist\n        if (err.code === 'ENOENT') {\n          mkdirp.sync(path.dirname(this.path), defaultPathMode);\n          return {};\n        } // improve the message of permission errors\n\n\n        if (err.code === 'EACCES') {\n          err.message = err.message + '\\n' + permissionError + '\\n';\n        } // empty the file if it encounters invalid JSON\n\n\n        if (err.name === 'SyntaxError') {\n          writeFileAtomic.sync(this.path, '', writeFileOptions);\n          return {};\n        }\n\n        throw err;\n      }\n    },\n    set: function (val) {\n      try {\n        // make sure the folder exists as it\n        // could have been deleted in the meantime\n        mkdirp.sync(path.dirname(this.path), defaultPathMode);\n        writeFileAtomic.sync(this.path, JSON.stringify(val, null, '\\t'), writeFileOptions);\n      } catch (err) {\n        // improve the message of permission errors\n        if (err.code === 'EACCES') {\n          err.message = err.message + '\\n' + permissionError + '\\n';\n        }\n\n        throw err;\n      }\n    }\n  },\n  size: {\n    get: function () {\n      return Object.keys(this.all || {}).length;\n    }\n  }\n});\n\nConfigstore.prototype.get = function (key) {\n  return dotProp.get(this.all, key);\n};\n\nConfigstore.prototype.set = function (key, val) {\n  var config = this.all;\n\n  if (arguments.length === 1) {\n    Object.keys(key).forEach(function (k) {\n      dotProp.set(config, k, key[k]);\n    });\n  } else {\n    dotProp.set(config, key, val);\n  }\n\n  this.all = config;\n};\n\nConfigstore.prototype.has = function (key) {\n  return dotProp.has(this.all, key);\n};\n\nConfigstore.prototype.delete = Configstore.prototype.del = function (key) {\n  var config = this.all;\n  dotProp.delete(config, key);\n  this.all = config;\n};\n\nConfigstore.prototype.clear = function () {\n  this.all = {};\n};\n\nmodule.exports = Configstore;","map":null,"metadata":{},"sourceType":"script"}